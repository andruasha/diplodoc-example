name: docs-build-action
description: Build & Upload documentation

inputs:
  storage-bucket:
    required: true
  storage-endpoint:
    required: true
  storage-access-key-id:
    required: true
  storage-secret-access-key:
    required: true
  storage-region:
    required: true
  src-root:
    default: "./"
  build-root:
    default: "./_docs-build"

runs:
  using: composite
  steps:
    - uses: actions/setup-node@v3
      with:
        node-version: 18
    - run: npm i @diplodoc/cli -g
      shell: bash
    - run: yfm -i ${{ inputs.src-root }} -o ${{ inputs.build-root }}
      shell: bash
    - name: Install s3cmd
      run: |
        sudo apt-get update
        sudo apt-get install s3cmd
      shell: bash
    - name: Configure s3cmd
      run: |
        cat <<EOL > ~/.s3cfg
          [default]
          access_key = ${inputs.storage-access-key-id}
          access_token =
          add_encoding_exts =
          add_headers =
          bucket_location = ${inputs.storage-region}
          ca_certs_file =
          cache_file =
          check_ssl_certificate = True
          check_ssl_hostname = True
          cloudfront_host = cloudfront.amazonaws.com
          content_disposition =
          content_type =
          default_mime_type = binary/octet-stream
          delay_updates = False
          delete_after = False
          delete_after_fetch = False
          delete_removed = False
          dry_run = False
          enable_multipart = True
          encoding = UTF-8
          encrypt = False
          expiry_date =
          expiry_days =
          expiry_prefix =
          follow_symlinks = False
          force = False
          get_continue = False
          gpg_command = /usr/bin/gpg
          gpg_decrypt = %(gpg_command)s -d --verbose --no-use-agent --batch --yes --passphrase-fd %(passphrase_fd)s -o %(output_file)s %(input_file)s
          gpg_encrypt = %(gpg_command)s -c --verbose --no-use-agent --batch --yes --passphrase-fd %(passphrase_fd)s -o %(output_file)s %(input_file)s
          gpg_passphrase = True
          guess_mime_type = True
          host_base = storage.yandexcloud.net
          host_bucket = %(bucket)s.storage.yandexcloud.net
          human_readable_sizes = False
          invalidate_default_index_on_cf = False
          invalidate_default_index_root_on_cf = True
          invalidate_on_cf = False
          kms_key =
          limit = -1
          limitrate = 0
          list_md5 = False
          log_target_prefix =
          long_listing = False
          max_delete = -1
          mime_type =
          multipart_chunk_size_mb = 15
          multipart_max_chunks = 10000
          preserve_attrs = True
          progress_meter = True
          proxy_host =
          proxy_port = 0
          put_continue = False
          recursive = False
          recv_chunk = 65536
          reduced_redundancy = False
          requester_pays = False
          restore_days = 1
          restore_priority = Standard
          secret_key = ${inputs.storage-secret-access-key}
          send_chunk = 65536
          server_side_encryption = False
          signature_v2 = False
          signurl_use_https = False
          simpledb_host = sdb.amazonaws.com
          skip_existing = False
          socket_timeout = 300
          stats = False
          stop_on_error = False
          storage_class =
          throttle_max = 100
          upload_id =
          urlencoding_mode = normal
          use_http_expect = False
          use_https = True
          use_mime_magic = True
          verbosity = WARNING
          website_endpoint = http://%(bucket)s.website.yandexcloud.net
          website_error =
          website_index = index.html
        EOL
      shell: bash
    - name: Upload to S3
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          PREFIX="pr-${{ github.event.pull_request.number }}"
        else
          PREFIX="main"
        fi

        yfm publish \
          -i "${{ inputs.build-root }}" \
          --endpoint "${{ inputs.storage-endpoint }}" \
          --region "${{ inputs.storage-region }}" \
          --bucket "${{ inputs.storage-bucket }}" \
          --access-key-id "${{ inputs.storage-access-key-id }}" \
          --secret-access-key "${{ inputs.storage-secret-access-key }}" \
          --prefix "${PREFIX}/"
